generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Provider {
  id                 Int            @id @default(autoincrement())
  name               String
  generalInformation String?        @map("general_information")
  createdAt          DateTime       @default(now()) @map("created_at")
  updatedAt          DateTime       @updatedAt @map("updated_at")
  jurisdictions      Jurisdiction[]

  @@map("providers")
}

model Jurisdiction {
  id                  Int                  @id @default(autoincrement())
  country             String
  region              String
  providerId          Int                  @map("provider_id")
  generalInformation  String?              @map("general_information")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  billingClaims       BillingClaim[]
  provider            Provider             @relation(fields: [providerId], references: [id])
  patients            Patient[]
  physicians          Physician[]
  referringPhysicians ReferringPhysician[]
  SearchQueryLog      SearchQueryLog[]
  sections            Section[]

  @@map("jurisdictions")
}

model Section {
  id                Int                @id @default(autoincrement())
  code              String
  title             String
  description       String?
  jurisdictionId    Int                @map("jurisdiction_id")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  billingCodes      BillingCode[]
  jurisdiction      Jurisdiction       @relation(fields: [jurisdictionId], references: [id])
  preferredSections PreferredSection[]

  @@map("sections")
}

model BillingCode {
  id                              Int                      @id @default(autoincrement())
  code                            String                   @db.VarChar(50)
  title                           String                   @default("") @db.VarChar(256)
  description                     String?                  @db.VarChar(256)
  section_id                      Int
  openai_embedding                String
  created_at                      DateTime                 @default(now())
  updated_at                      DateTime                 @updatedAt
  billing_record_type             Int                      @default(50) @map("billing_record_type")
  low_fee                         Float                    @default(0)
  high_fee                        Float                    @default(0)
  service_class                   String?                  @db.VarChar(50)
  add_on_indicator                String?                  @db.VarChar(50)
  multiple_unit_indicator         String?                  @db.VarChar(50)
  fee_determinant                 String                   @default("") @db.VarChar(50)
  anaesthesia_indicator           String?                  @db.VarChar(50)
  submit_at_100_percent           String?                  @db.VarChar(50)
  referring_practitioner_required String?                  @db.VarChar(50)
  start_time_required             String?                  @db.VarChar(50)
  stop_time_required              String?                  @db.VarChar(50)
  technical_fee                   Float?
  max_units                       Int?
  day_range                       Int?
  embedding_vector                Unsupported("tsvector")? @map("embedding_vector")
  changeLogs                      BillingCodeChangeLog[]
  billing_code_embeddings         billing_code_embeddings?
  section                         Section                  @relation(fields: [section_id], references: [id])
  serviceCodes                    ServiceCodes[]
  frequentlyUsedBy                FrequentlyUsedCode[]

  // Many-to-many relationship for previous/next codes
  previousCodes BillingCodeRelation[] @relation("BillingCodeNext")
  nextCodes     BillingCodeRelation[] @relation("BillingCodePrevious")

  // Relationship to billing code chains view
  billingCodeChains BillingCodeChain[] @relation("BillingCodeToChain")

  @@index([section_id])
  @@index([code])
  @@index([title])
  @@map("billing_codes")
}

// Junction table for billing code relationships
model BillingCodeRelation {
  id               Int      @id @default(autoincrement())
  previous_code_id Int      @map("previous_code_id")
  next_code_id     Int      @map("next_code_id")
  created_at       DateTime @default(now()) @map("created_at")

  previousCode BillingCode @relation("BillingCodePrevious", fields: [previous_code_id], references: [id], onDelete: Cascade)
  nextCode     BillingCode @relation("BillingCodeNext", fields: [next_code_id], references: [id], onDelete: Cascade)

  @@unique([previous_code_id, next_code_id])
  @@index([previous_code_id])
  @@index([next_code_id])
  @@map("billing_code_relations")
}

model BillingCodeChangeLog {
  id                              Int         @id @default(autoincrement())
  billing_code_id                 Int
  code                            String      @db.VarChar(50)
  title                           String      @default("") @db.VarChar(256)
  description                     String?     @db.VarChar(256)
  changed_at                      DateTime    @default(now())
  billing_record_type             Int         @default(50) @map("billing_record_type")
  low_fee                         Float       @default(0)
  high_fee                        Float       @default(0)
  service_class                   String?     @db.VarChar(50)
  add_on_indicator                String?     @db.VarChar(50)
  multiple_unit_indicator         String?     @db.VarChar(50)
  fee_determinant                 String      @default("") @db.VarChar(50)
  anaesthesia_indicator           String?     @db.VarChar(50)
  submit_at_100_percent           String?     @db.VarChar(50)
  referring_practitioner_required String?     @db.VarChar(50)
  start_time_required             String?     @db.VarChar(50)
  stop_time_required              String?     @db.VarChar(50)
  technical_fee                   Float?
  max_units                       Int?
  day_range                       Int?
  billing_code                    BillingCode @relation(fields: [billing_code_id], references: [id])

  @@index([billing_code_id])
  @@map("billing_code_change_logs")
}

model User {
  id                    Int                    @id @default(autoincrement())
  email                 String                 @unique
  password_hash         String
  roles                 Role[]
  created_at            DateTime               @default(now())
  updated_at            DateTime               @updatedAt
  reset_token           String?
  reset_token_expires   DateTime?
  encrypted_first_name  String?
  encrypted_last_name   String?
  encrypted_city        String?
  encrypted_country     String?
  encrypted_postal_code String?
  encrypted_state       String?
  encrypted_street      String?
  encrypted_unit        String?
  physicians            Physician[]
  SearchQueryLog        SearchQueryLog[]
  serviceCodeChangeLogs ServiceCodeChangeLog[]

  @@map("users")
}

model AIPrompt {
  id             Int      @id @default(autoincrement())
  jurisdiction   String
  provider       String
  promptTemplate String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([jurisdiction, provider])
  @@map("ai_prompts")
}

model Patient {
  id             String       @id
  firstName      String       @map("first_name")
  lastName       String       @map("last_name")
  middleInitial  String?      @map("middle_initial")
  billingNumber  String       @map("billing_number")
  jurisdictionId Int          @map("jurisdiction_id")
  physicianId    String       @map("physician_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  dateOfBirth    String       @map("date_of_birth")
  sex            String       @map("sex")
  jurisdiction   Jurisdiction @relation(fields: [jurisdictionId], references: [id])
  physician      Physician    @relation(fields: [physicianId], references: [id])
  services       Service[]

  @@map("patients")
}

model Physician {
  id                    String               @id
  firstName             String               @map("first_name")
  lastName              String               @map("last_name")
  middleInitial         String?              @map("middle_initial")
  billingNumber         String               @map("billing_number")
  userId                Int                  @map("user_id")
  jurisdictionId        Int                  @map("jurisdiction_id")
  createdAt             DateTime             @default(now()) @map("created_at")
  updatedAt             DateTime             @updatedAt @map("updated_at")
  city                  String?
  groupNumber           String?              @map("group_number")
  healthInstitutionId   Int?                 @map("health_institution_id")
  postalCode            String?              @map("postal_code")
  province              String?
  streetAddress         String?              @map("street_address")
  mostRecentClaimNumber Int                  @default(10000) @map("most_recent_claim_number")
  billingClaims         BillingClaim[]
  patients              Patient[]
  healthInstitution     HealthInstitution?   @relation(fields: [healthInstitutionId], references: [id])
  jurisdiction          Jurisdiction         @relation(fields: [jurisdictionId], references: [id])
  user                  User                 @relation(fields: [userId], references: [id])
  referringPhysicians   ReferringPhysician[]
  SearchQueryLog        SearchQueryLog[]
  Service               Service[]
  preferredSections     PreferredSection[]
  frequentlyUsedCodes   FrequentlyUsedCode[]

  @@map("physicians")
}

model ICDCode {
  id          Int       @id @default(autoincrement())
  version     String
  code        String
  description String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  services    Service[]

  @@index([code])
  @@index([description])
  @@index([version])
  @@index([code, version])
  @@map("icd_codes")
}

model HealthInstitution {
  id          Int         @id @default(autoincrement())
  name        String
  street      String
  city        String
  state       String
  postalCode  String      @map("postal_code")
  country     String
  latitude    Float
  longitude   Float
  phoneNumber String      @map("phone_number")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  number      String?
  Physician   Physician[]
  services    Service[]

  @@map("health_institutions")
}

model BillingClaim {
  id             String           @id
  friendlyId     String           @unique @map("friendly_id")
  physicianId    String           @map("physician_id")
  jurisdictionId Int              @map("jurisdiction_id")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  batchClaimText String?          @map("batch_claim_text")
  jurisdiction   Jurisdiction     @relation(fields: [jurisdictionId], references: [id])
  physician      Physician        @relation(fields: [physicianId], references: [id])
  SearchQueryLog SearchQueryLog[]
  services       Service[]

  @@map("billing_claims")
}

model Service {
  id                   Int                 @id @default(autoincrement())
  claimId              String?             @map("claim_id")
  status               ServiceStatus       @default(OPEN)
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @updatedAt @map("updated_at")
  patientId            String?             @map("patient_id")
  icdCodeId            Int?                @map("icd_code_id")
  referringPhysicianId Int?                @map("referring_physician_id")
  healthInstitutionId  Int?                @map("health_institution_id")
  serviceDate          DateTime            @default(now()) @map("service_date")
  summary              String              @default("")
  physicianId          String              @map("physician_id")
  visitNumber          String?             @map("visit_number")
  attendingPhysicianId Int?                @map("attending_physician_id")
  familyPhysicianId    Int?                @map("family_physician_id")
  serviceCodes         ServiceCodes[]
  claim                BillingClaim?       @relation(fields: [claimId], references: [id], onDelete: SetNull)
  healthInstitution    HealthInstitution?  @relation(fields: [healthInstitutionId], references: [id])
  icdCode              ICDCode?            @relation(fields: [icdCodeId], references: [id])
  patient              Patient?            @relation(fields: [patientId], references: [id])
  physician            Physician           @relation(fields: [physicianId], references: [id])
  referringPhysician   ReferringPhysician? @relation(fields: [referringPhysicianId], references: [id])
  attendingPhysician   ReferringPhysician? @relation("AttendingPhysician", fields: [attendingPhysicianId], references: [id])
  familyPhysician      ReferringPhysician? @relation("FamilyPhysician", fields: [familyPhysicianId], references: [id])

  @@index([claimId])
  @@index([patientId])
  @@index([physicianId])
  @@index([icdCodeId])
  @@index([referringPhysicianId])
  @@index([healthInstitutionId])
  @@index([attendingPhysicianId])
  @@index([familyPhysicianId])
  @@map("services")
}

model ServiceCodes {
  id                   Int                    @id @default(autoincrement())
  codeId               Int                    @map("code_id")
  serviceStartTime     DateTime?              @map("service_start_time")
  serviceEndTime       DateTime?              @map("service_end_time")
  serviceDate          DateTime?              @map("service_date")
  serviceEndDate       DateTime?              @map("service_end_date")
  bilateralIndicator   String?                @map("bilateral_indicator")
  numberOfUnits        Int                    @map("number_of_units")
  serviceId            Int                    @map("service_id")
  specialCircumstances String?                @map("special_circumstances")
  serviceLocation      String                 @map("service_location")
  locationOfService    String                 @map("location_of_service")
  claimNumber          Int?                   @map("claim_number")
  sequence             Int?                   @map("sequence")
  billingCode          BillingCode            @relation(fields: [codeId], references: [id])
  service              Service                @relation(fields: [serviceId], references: [id])
  changeLogs           ServiceCodeChangeLog[]

  @@index([serviceId])
  @@index([codeId])
  @@index([claimNumber])
  @@map("service_codes")
}

model ReferringPhysician {
  id                Int                      @id @default(autoincrement())
  jurisdictionId    Int                      @map("jurisdiction_id")
  code              String
  name              String
  location          String
  specialty         String
  physicianId       String?                  @map("physician_id")
  createdAt         DateTime                 @default(now()) @map("created_at")
  updatedAt         DateTime                 @updatedAt @map("updated_at")
  searchVector      Unsupported("tsvector")? @map("search_vector")
  jurisdiction      Jurisdiction             @relation(fields: [jurisdictionId], references: [id])
  physician         Physician?               @relation(fields: [physicianId], references: [id])
  Services          Service[]
  attendingServices Service[]                @relation("AttendingPhysician")
  familyServices    Service[]                @relation("FamilyPhysician")

  @@map("referring_physicians")
}

model SearchQueryLog {
  id                      Int                       @id @default(autoincrement())
  searchString            String                    @map("search_string")
  embeddings              String
  results                 String                    @map("results")
  jurisdictionId          Int                       @map("jurisdiction_id")
  ipAddress               String?                   @map("ip_address")
  userAgent               String?                   @map("user_agent")
  deviceInfo              String?                   @map("device_info")
  createdAt               DateTime                  @default(now()) @map("created_at")
  updatedAt               DateTime                  @updatedAt @map("updated_at")
  previousLogId           Int?                      @map("previous_log_id")
  physicianId             String?
  userId                  Int?                      @map("user_id")
  billingClaimId          String?
  search_query_embeddings search_query_embeddings[]
  BillingClaim            BillingClaim?             @relation(fields: [billingClaimId], references: [id])
  jurisdiction            Jurisdiction              @relation(fields: [jurisdictionId], references: [id])
  Physician               Physician?                @relation(fields: [physicianId], references: [id])
  previousLog             SearchQueryLog?           @relation("PreviousLog", fields: [previousLogId], references: [id])
  nextLogs                SearchQueryLog[]          @relation("PreviousLog")
  user                    User?                     @relation(fields: [userId], references: [id])

  @@map("search_query_logs")
}

model billing_code_embeddings {
  id                Int                   @id @default(autoincrement())
  billing_code_id   Int                   @unique(map: "billing_code_embeddings_billing_code_id_unique")
  vector_embeddings Unsupported("vector")
  created_at        DateTime?             @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?             @default(now()) @db.Timestamptz(6)
  billing_codes     BillingCode           @relation(fields: [billing_code_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model search_query_embeddings {
  id                  Int                   @id @default(autoincrement())
  search_query_log_id Int
  vector_embeddings   Unsupported("vector")
  created_at          DateTime?             @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?             @default(now()) @db.Timestamptz(6)
  search_query_logs   SearchQueryLog        @relation(fields: [search_query_log_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([search_query_log_id], map: "idx_search_query_embeddings_log_id")
  @@index([vector_embeddings], map: "idx_search_query_embeddings_vector")
}

model PreferredSection {
  id          Int      @id @default(autoincrement())
  physicianId String   @map("physician_id")
  sectionId   Int      @map("section_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  physician Physician @relation(fields: [physicianId], references: [id], onDelete: Cascade)
  section   Section   @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([physicianId, sectionId])
  @@index([physicianId])
  @@index([sectionId])
  @@map("preferred_sections")
}

model FrequentlyUsedCode {
  id            Int      @id @default(autoincrement())
  physicianId   String   @map("physician_id")
  billingCodeId Int      @map("billing_code_id")
  sortMetric    Int      @default(0) @map("sort_metric")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  physician   Physician   @relation(fields: [physicianId], references: [id], onDelete: Cascade)
  billingCode BillingCode @relation(fields: [billingCodeId], references: [id], onDelete: Cascade)

  @@unique([physicianId, billingCodeId])
  @@index([physicianId])
  @@index([billingCodeId])
  @@map("frequently_used_codes")
}

enum Role {
  PATIENT
  PHYSICIAN
  ADMIN
}

enum ServiceStatus {
  OPEN
  PENDING
  SENT
}

enum ClaimStatus {
  PENDING
  SENT
  APPROVED
  REJECTED
}

enum ServiceCodeChangeType {
  INSERT
  DELETE
  UPDATE
  ROUND
}

model ServiceCodeChangeLog {
  id            Int                   @id @default(autoincrement())
  serviceCodeId Int                   @map("service_code_id")
  changeType    ServiceCodeChangeType @map("change_type")
  previousData  String?               @map("previous_data")
  newData       String?               @map("new_data")
  changedBy     Int?                  @map("changed_by")
  changedAt     DateTime              @default(now()) @map("changed_at")
  notes         String?

  serviceCode ServiceCodes @relation(fields: [serviceCodeId], references: [id], onDelete: Cascade)
  user        User?        @relation(fields: [changedBy], references: [id])

  @@index([serviceCodeId])
  @@index([changedAt])
  @@index([changeType])
  @@map("service_code_change_logs")
}

// View model for billing code chains
model BillingCodeChain {
  codeId             Int     @map("code_id")
  code               String
  title              String
  dayRange           Int     @map("day_range")
  rootId             Int     @map("root_id")
  previousCodeId     Int?    @map("previous_code_id")
  previousDayRange   Int     @map("previous_day_range")
  cumulativeDayRange Int     @map("cumulative_day_range")
  prevPlusSelf       Int     @map("prev_plus_self")
  isLast             Boolean @map("is_last")

  // Relationship back to BillingCode
  billingCode BillingCode @relation("BillingCodeToChain", fields: [codeId], references: [id])

  @@unique([codeId, rootId])
  @@map("billing_code_chain")
}
