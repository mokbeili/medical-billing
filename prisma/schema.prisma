generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Provider {
  id                 Int            @id @default(autoincrement())
  name               String
  generalInformation String?        @map("general_information")
  createdAt          DateTime       @default(now()) @map("created_at")
  updatedAt          DateTime       @updatedAt @map("updated_at")
  jurisdictions      Jurisdiction[]

  @@map("providers")
}

model Jurisdiction {
  id                  Int                  @id @default(autoincrement())
  country             String
  region              String
  providerId          Int                  @map("provider_id")
  generalInformation  String?              @map("general_information")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  billingClaims       BillingClaim[]
  provider            Provider             @relation(fields: [providerId], references: [id])
  patients            Patient[]
  physicians          Physician[]
  referringPhysicians ReferringPhysician[]
  SearchQueryLog      SearchQueryLog[]
  sections            Section[]

  @@map("jurisdictions")
}

model Section {
  id             Int           @id @default(autoincrement())
  code           String
  title          String
  description    String?
  jurisdictionId Int           @map("jurisdiction_id")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  billingCodes   BillingCode[]
  jurisdiction   Jurisdiction  @relation(fields: [jurisdictionId], references: [id])

  @@map("sections")
}

model BillingCode {
  id                    Int           @id @default(autoincrement())
  code                  String
  title                 String
  description           String?
  section_id            Int
  openai_embedding      String
  created_at            DateTime      @default(now())
  updated_at            DateTime      @updatedAt
  code_class            String?
  anes                  String?
  details               String?
  general_practice_cost String?
  specialist_price      String?
  referred_price        String?
  non_referred_price    String?
  section               Section       @relation(fields: [section_id], references: [id])
  serviceCodes          ServiceCode[]

  @@index([section_id])
  @@map("billing_codes")
}

model User {
  id                    Int              @id @default(autoincrement())
  email                 String           @unique
  password_hash         String
  roles                 Role[]
  created_at            DateTime         @default(now())
  updated_at            DateTime         @updatedAt
  reset_token           String?
  reset_token_expires   DateTime?
  encrypted_city        String?
  encrypted_country     String?
  encrypted_postal_code String?
  encrypted_state       String?
  encrypted_street      String?
  encrypted_unit        String?
  physicians            Physician[]
  SearchQueryLog        SearchQueryLog[]

  @@map("users")
}

model AIPrompt {
  id             Int      @id @default(autoincrement())
  jurisdiction   String
  provider       String
  promptTemplate String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([jurisdiction, provider])
  @@map("ai_prompts")
}

model Patient {
  id             String        @id
  firstName      String        @map("first_name")
  lastName       String        @map("last_name")
  middleInitial  String?       @map("middle_initial")
  billingNumber  String        @map("billing_number")
  jurisdictionId Int           @map("jurisdiction_id")
  physicianId    String        @map("physician_id")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  jurisdiction   Jurisdiction  @relation(fields: [jurisdictionId], references: [id])
  physician      Physician     @relation(fields: [physicianId], references: [id])
  ServiceCode    ServiceCode[]

  @@map("patients")
}

model Physician {
  id                  String               @id
  firstName           String               @map("first_name")
  lastName            String               @map("last_name")
  middleInitial       String?              @map("middle_initial")
  billingNumber       String               @map("billing_number")
  userId              Int                  @map("user_id")
  jurisdictionId      Int                  @map("jurisdiction_id")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  billingClaims       BillingClaim[]
  patients            Patient[]
  jurisdiction        Jurisdiction         @relation(fields: [jurisdictionId], references: [id])
  user                User                 @relation(fields: [userId], references: [id])
  referringPhysicians ReferringPhysician[]
  SearchQueryLog      SearchQueryLog[]

  @@map("physicians")
}

model ICDCode {
  id          Int           @id @default(autoincrement())
  version     String
  code        String
  description String
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  ServiceCode ServiceCode[]

  @@index([code])
  @@map("icd_codes")
}

model HealthInstitution {
  id          Int           @id @default(autoincrement())
  name        String
  street      String
  city        String
  state       String
  postalCode  String        @map("postal_code")
  country     String
  latitude    Float
  longitude   Float
  phoneNumber String        @map("phone_number")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  ServiceCode ServiceCode[]

  @@map("health_institutions")
}

model BillingClaim {
  id             String           @id
  friendlyId     String           @unique @map("friendly_id")
  physicianId    String           @map("physician_id")
  jurisdictionId Int              @map("jurisdiction_id")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  jurisdiction   Jurisdiction     @relation(fields: [jurisdictionId], references: [id])
  physician      Physician        @relation(fields: [physicianId], references: [id])
  SearchQueryLog SearchQueryLog[]
  serviceCodes   ServiceCode[]

  @@map("billing_claims")
}

model ServiceCode {
  id                   Int                 @id(map: "billing_claim_codes_pkey") @default(autoincrement())
  claimId              String?             @map("claim_id")
  codeId               Int                 @map("code_id")
  status               ClaimStatus
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @updatedAt @map("updated_at")
  patientId            String?             @map("patient_id")
  icdCodeId            Int?                @map("icd_code_id")
  referringPhysicianId Int?                @map("referring_physician_id")
  healthInstitutionId  Int?                @map("health_institution_id")
  serviceDate          DateTime            @default(now()) @map("service_date")
  serviceStartTime     DateTime?           @map("service_start_time")
  serviceEndTime       DateTime?           @map("service_end_time")
  summary              String              @default("")
  claim                BillingClaim?       @relation(fields: [claimId], references: [id], onDelete: Restrict, map: "billing_claim_codes_claim_id_fkey")
  code                 BillingCode         @relation(fields: [codeId], references: [id], map: "billing_claim_codes_code_id_fkey")
  healthInstitution    HealthInstitution?  @relation(fields: [healthInstitutionId], references: [id])
  icdCode              ICDCode?            @relation(fields: [icdCodeId], references: [id])
  patient              Patient?            @relation(fields: [patientId], references: [id], onDelete: Restrict)
  referringPhysician   ReferringPhysician? @relation(fields: [referringPhysicianId], references: [id])

  @@map("service_codes")
}

model ReferringPhysician {
  id             Int           @id @default(autoincrement())
  jurisdictionId Int           @map("jurisdiction_id")
  code           String
  name           String
  location       String
  specialty      String
  physicianId    String?       @map("physician_id")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  jurisdiction   Jurisdiction  @relation(fields: [jurisdictionId], references: [id])
  physician      Physician?    @relation(fields: [physicianId], references: [id])
  ServiceCode    ServiceCode[]

  @@map("referring_physicians")
}

model SearchQueryLog {
  id             Int              @id @default(autoincrement())
  searchString   String           @map("search_string")
  embeddings     String
  results        String           @map("results")
  jurisdictionId Int              @map("jurisdiction_id")
  ipAddress      String?          @map("ip_address")
  userAgent      String?          @map("user_agent")
  deviceInfo     String?          @map("device_info")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  previousLogId  Int?             @map("previous_log_id")
  physicianId    String?
  userId         Int?             @map("user_id")
  billingClaimId String?
  BillingClaim   BillingClaim?    @relation(fields: [billingClaimId], references: [id])
  jurisdiction   Jurisdiction     @relation(fields: [jurisdictionId], references: [id])
  Physician      Physician?       @relation(fields: [physicianId], references: [id])
  previousLog    SearchQueryLog?  @relation("PreviousLog", fields: [previousLogId], references: [id])
  nextLogs       SearchQueryLog[] @relation("PreviousLog")
  user           User?            @relation(fields: [userId], references: [id])

  @@map("search_query_logs")
}

enum Role {
  PATIENT
  PHYSICIAN
  ADMIN
}

enum ClaimStatus {
  PENDING
  SENT
  APPROVED
  REJECTED
}
