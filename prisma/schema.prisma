generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Provider {
  id                 Int            @id @default(autoincrement())
  name               String
  generalInformation String?        @map("general_information")
  createdAt          DateTime       @default(now()) @map("created_at")
  updatedAt          DateTime       @updatedAt @map("updated_at")
  jurisdictions      Jurisdiction[]

  @@map("providers")
}

model Jurisdiction {
  id                 Int            @id @default(autoincrement())
  country            String
  region             String
  providerId         Int            @map("provider_id")
  generalInformation String?        @map("general_information")
  createdAt          DateTime       @default(now()) @map("created_at")
  updatedAt          DateTime       @updatedAt @map("updated_at")
  billingClaims      BillingClaim[]
  provider           Provider       @relation(fields: [providerId], references: [id])
  patients           Patient[]
  physicians         Physician[]
  sections           Section[]

  @@map("jurisdictions")
}

model Section {
  id             Int           @id @default(autoincrement())
  code           String
  title          String
  description    String?
  jurisdictionId Int           @map("jurisdiction_id")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  billingCodes   BillingCode[]
  jurisdiction   Jurisdiction  @relation(fields: [jurisdictionId], references: [id])

  @@map("sections")
}

model BillingCode {
  id                    Int                @id @default(autoincrement())
  code                  String
  title                 String
  description           String?
  section_id            Int
  openai_embedding      String
  created_at            DateTime           @default(now())
  updated_at            DateTime           @updatedAt
  code_class            String?
  anes                  String?
  details               String?
  general_practice_cost String?
  specialist_price      String?
  referred_price        String?
  non_referred_price    String?
  claimCodes            BillingClaimCode[]
  section               Section            @relation(fields: [section_id], references: [id])

  @@index([section_id])
  @@map("billing_codes")
}

model User {
  id                    Int         @id @default(autoincrement())
  email                 String      @unique
  password_hash         String
  roles                 Role[]
  created_at            DateTime    @default(now())
  updated_at            DateTime    @updatedAt
  reset_token           String?
  reset_token_expires   DateTime?
  encrypted_city        String?
  encrypted_country     String?
  encrypted_postal_code String?
  encrypted_state       String?
  encrypted_street      String?
  encrypted_unit        String?
  physicians            Physician[]

  @@map("users")
}

model AIPrompt {
  id             Int      @id @default(autoincrement())
  jurisdiction   String
  provider       String
  promptTemplate String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([jurisdiction, provider])
  @@map("ai_prompts")
}

model Patient {
  id             String         @id
  firstName      String         @map("first_name")
  lastName       String         @map("last_name")
  middleInitial  String?        @map("middle_initial")
  billingNumber  String         @map("billing_number")
  jurisdictionId Int            @map("jurisdiction_id")
  physicianId    String         @map("physician_id")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  billingClaims  BillingClaim[]
  jurisdiction   Jurisdiction   @relation(fields: [jurisdictionId], references: [id])
  physician      Physician      @relation(fields: [physicianId], references: [id])

  @@map("patients")
}

model Physician {
  id             String         @id
  firstName      String         @map("first_name")
  lastName       String         @map("last_name")
  middleInitial  String?        @map("middle_initial")
  billingNumber  String         @map("billing_number")
  userId         Int            @map("user_id")
  jurisdictionId Int            @map("jurisdiction_id")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  billingClaims  BillingClaim[]
  patients       Patient[]
  jurisdiction   Jurisdiction   @relation(fields: [jurisdictionId], references: [id])
  user           User           @relation(fields: [userId], references: [id])

  @@map("physicians")
}

model ICDCode {
  id          Int            @id @default(autoincrement())
  version     String
  code        String
  description String
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  claims      BillingClaim[]

  @@index([code])
  @@map("icd_codes")
}

model BillingClaim {
  id                String             @id
  friendlyId        String             @unique @map("friendly_id")
  physicianId       String             @map("physician_id")
  patientId         String             @map("patient_id")
  jurisdictionId    Int                @map("jurisdiction_id")
  icdCodeId         Int?               @map("icd_code_id")
  summary           String
  serviceDate       DateTime           @map("service_date")
  openaiEmbedding   String             @map("openai_embedding")
  openaiSuggestions String?            @map("openai_suggestions")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  claimCodes        BillingClaimCode[]
  jurisdiction      Jurisdiction       @relation(fields: [jurisdictionId], references: [id])
  patient           Patient            @relation(fields: [patientId], references: [id])
  physician         Physician          @relation(fields: [physicianId], references: [id])
  icdCode           ICDCode?           @relation(fields: [icdCodeId], references: [id])

  @@map("billing_claims")
}

model BillingClaimCode {
  id        Int          @id @default(autoincrement())
  claimId   String       @map("claim_id")
  codeId    Int          @map("code_id")
  status    ClaimStatus
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  claim     BillingClaim @relation(fields: [claimId], references: [id])
  code      BillingCode  @relation(fields: [codeId], references: [id])

  @@map("billing_claim_codes")
}

enum Role {
  PATIENT
  PHYSICIAN
  ADMIN
}

enum ClaimStatus {
  PENDING
  SENT
  APPROVED
  REJECTED
}
